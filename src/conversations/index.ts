import { MyContext, MyConversationContext, MyConversation } from '../types/bot';
import { createCar, getCarStatistics } from '../handlers/car';
import { createPayment } from '../handlers/payment';
import { getUserByTelegramId } from '../handlers/user';
import { createCarKeyboard } from '../config/bot';
import { SUCCESS_MESSAGES } from '../config/bot';

// --- Conversation for adding a car ---
export async function addCarConversation(conversation: MyConversation, ctx: MyConversationContext) {
  console.log('Starting addCarConversation for user:', ctx.from?.id);
  
  await ctx.reply('üöó –ô–æ—É! –ö–∞–∫—É—é —Ç–∞—á–∫—É –±–µ—Ä—ë–º, –±—Ä–∞—Ç–∏—à–∫–∞? –ù–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –º–æ–¥–µ–ª—å?');
  const { message } = await conversation.wait();
  console.log('Received car name message:', message);
  
  if (!message?.text) {
    console.log('Invalid car name input received');
    await ctx.reply('ü§® –ë—Ä–∞—Ç, —Ç—ã —á–µ–≥–æ? –ù–∞–ø–∏—à–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—á–∫–∏!');
    return;
  }
  const carName = message.text;
  console.log('Car name received:', carName);

  await ctx.reply('üí∞ –ê —Ç–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, —Å–∫–æ–ª—å–∫–æ –±–∞–±–ª–∞ –æ—Å—Ç–∞–ª–æ—Å—å —Å–∫–∏–Ω—É—Ç—å –∑–∞ –Ω–µ—ë (–≤ $)?\n–ú–æ–∂–Ω–æ –¥–∞–∂–µ –∫–∞–∫ –Ω–∞ —Å–æ–∫–∞—Ä–µ –ø–æ—Å—á–∏—Ç–∞—Ç—å, —è —à–∞—Ä—é üòé');
  const { message: amountMessage } = await conversation.wait();
  console.log('Received amount message:', amountMessage);
  
  if (!amountMessage?.text) {
    console.log('Invalid amount input received');
    await ctx.reply('ü§î –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—É–º–º—É, –±—Ä–∞—Ç–∏—à–∫–∞... –î–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π!');
    return;
  }
  const amount = parseFloat(amountMessage.text);
  console.log('Parsed amount:', amount);

  if (isNaN(amount)) {
    console.log('Invalid number format for amount');
    await ctx.reply('üòÖ –ë—Ä–∞—Ç, —Ç—ã —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ –ø–∏—à–µ—à—å... –ù—É–∂–Ω–∞ —Å—É–º–º–∞ —Ü–∏—Ñ—Ä–∞–º–∏!');
    return;
  }

  console.log('Getting user by telegram ID:', ctx.from?.id);
  const user = await getUserByTelegramId(ctx.from!.id);
  if (!user) {
    console.log('User not found for telegram ID:', ctx.from?.id);
    await ctx.reply('üò¨ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —Ç–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º, –±—Ä–∞—Ç–∏—à–∫–∞...');
    return;
  }
  console.log('User found:', user);

  console.log('Creating car with params:', { userId: user.id, carName, amount });
  try {
    const car = await createCar(user.id, carName, amount, amount);
    console.log('Car created successfully:', car);
    
    const keyboard = createCarKeyboard(car.id);
    console.log('Created keyboard for car ID:', car.id);

    await ctx.reply(
      SUCCESS_MESSAGES.car_added(car.name, Number(car.remainingAmount)),
      { reply_markup: keyboard }
    );
    console.log('Success message sent to user');
  } catch (error) {
    console.error('Error creating car:', error);
    await ctx.reply('üò¨ –£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–∞—á–∫–∏. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑!');
  }
}

// --- Conversation for adding a payment ---
export async function addPaymentConversation(conversation: MyConversation, ctx: MyConversationContext) {
  if (!ctx.callbackQuery?.data) {
    await ctx.reply('üòÖ –ë—Ä–∞—Ç–∞–Ω, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ –Ω–∞–∂–∞–ª... –î–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π!');
    return;
  }

  const match = ctx.callbackQuery.data.match(/^add_payment_(\d+)$/);
  if (!match?.[1]) {
    await ctx.reply('ü§î –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞—á–∫—É –≤ –±–∞–∑–µ... –ú–æ–∂–µ—Ç –≥–ª—è–Ω–µ–º, —á—Ç–æ –µ—Å—Ç—å?');
    return;
  }

  const carId = parseInt(match[1]);
  
  const user = await getUserByTelegramId(ctx.from!.id);
  if (!user) return;

  const car = await getCarStatistics(carId);
  if (!car) {
    await ctx.reply('üò¨ –ë—Ä–∞—Ç–∏—à, —Ç–∞—á–∫–∞ –∫—É–¥–∞-—Ç–æ –ø—Ä–æ–ø–∞–ª–∞ –∏–∑ –±–∞–∑—ã... –ú–æ–∂–µ—Ç, —É–∂–µ –ø—Ä–æ–¥–∞–ª?');
    return;
  }

  if (car.userId !== user.id) {
    await ctx.reply('üö´ –≠, –±—Ä–∞—Ç, —Ç—ã —á–µ–≥–æ? –≠—Ç–æ –Ω–µ —Ç–≤–æ—è —Ç–∞—á–∫–∞! –î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º —Ç–≤–æ–∏!');
    return;
  }

  await ctx.reply('üí∏ –°–∫–æ–ª—å–∫–æ –∑–∞–Ω–æ—Å–∏—à—å –≤ –∫–∞—Å—Å—É, –±—Ä–∞—Ç–∏—à–∫–∞ (–≤ $)?\n–¢–æ–ª—å–∫–æ –ø–æ-—á–µ—Å—Ç–Ω–æ–º—É, –±–µ–∑ –∫—Ä–∏–ø—Ç—ã üòÖ');
  const { message } = await conversation.wait();
  if (!message?.text) {
    await ctx.reply('ü§® –ë—Ä–∞—Ç, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—É–º–º—É... –î–∞–≤–∞–π –Ω–æ—Ä–º–∞–ª—å–Ω–æ!');
    return;
  }
  const amount = parseFloat(message.text);

  if (isNaN(amount)) {
    await ctx.reply('üòÖ –¢—ã —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ –ø–∏—à–µ—à—å... –ù—É–∂–Ω–∞ —Å—É–º–º–∞ —Ü–∏—Ñ—Ä–∞–º–∏, –∫–∞–∫ –≤ –æ–±–º–µ–Ω–Ω–∏–∫–µ!');
    return;
  }

  const payment = await createPayment(user.id, carId, amount);
  const updatedCar = await getCarStatistics(carId);

  if (!updatedCar) {
    await ctx.reply('üò¨ –ß—Ç–æ-—Ç–æ –±–∞–∑–∞ –ª–∞–≥–∞–µ—Ç... –î–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π –∑–∞–º—É—Ç–∏–º!');
    return;
  }

  const keyboard = createCarKeyboard(carId);

  await ctx.reply(
    SUCCESS_MESSAGES.payment_added(amount, updatedCar.remaining_amount),
    { reply_markup: keyboard }
  );
} 