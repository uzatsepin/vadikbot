import cron from 'node-cron';
import { Bot } from 'grammy';
import { MyConversationContext } from '../types/bot';
import { getUserCars, getCarStatistics } from '../handlers/car';
import { getPaymentsForWeek } from '../handlers/payment';
import prisma from './prisma';

const REMINDER_MESSAGES = [
  "๐ค ะะพั, ะฑัะฐัะธัะบะฐ! ะะดะต ะดะตะฝัะณะธ ะทะฐ ัะฐัะบั? ะะฐะดะธะบ ะฑะตัะฟะพะบะพะธััั!",
  "๐ฐ ะกะปััะฐะน, ะฑัะฐั, ัะฐะผ ะฟะพ ัะฐัะบะต ะดะฒะธะถะตะฝะธะต ะฝัะถะฝะพ... ะะฐะฒะฐะน ะทะฐะผััะธะผ ะฟะปะฐััะถ?",
  "๐ ะัะฐัะฐะฝ, ัะฒะพั ะปะฐััะพัะบะฐ ะถะดัั ะพะฟะปะฐัั! ะะต ะฟะพะดะฒะตะดะธ ะตั!",
  "๐ธ ะญะน, ัะตะผัะธะบ! ะะพัะฐ ะทะฐะฝะตััะธ ะฑะฐะฑะบะธ ะทะฐ ัะฐัะบั, ะฝะต ะทะฐะฑัะป?",
  "๐ต ะัะฐั, ั ะบะฐะบ ะบัะธะฟัะฐะฝ ะฝะฐ ะผะตะดะฒะตะถัะตะผ ััะฝะบะต - ะถะดั ัะฒะพะตะณะพ ะทะฐะฝะพัะฐ ะทะฐ ัะฐัะบั!",
  "๐จ ะกะปััั, ะฑัะฐัะธัะบะฐ! ะญัะฐ ะฝะตะดะตะปั ะฟัััะฐั, ะบะฐะบ ัะพะปะพะดะฝัะน ะบะพัะตะปัะบ... ะะพะถะตั ะทะฐะผััะธะผ ะฟะปะฐััะถ?",
  "๐ ะะพะฒะฐั ะฝะตะดะตะปั, ะฝะพะฒัะต ะดะฒะธะถะตะฝะธั! ะะฐะฒะฐะน ะฟะพัะตัะฐะตะผ ะฒะพะฟัะพั ั ะพะฟะปะฐัะพะน?",
  "๐ ะัะฐัะฐะฝ, ะฝะฐ ัะพะบะฐัะต ัะถะต ะฒัะต ะฟะปะฐัะตะถะธ ะทะฐะผััะธะปะธ, ะฐ ัั ััะพ?",
  "๐ ะะต ััะฐะฝะธ ะฑะฐะฑะบะธ ะฒ ะบัะธะฟัะต - ะทะฐะฝะตัะธ ะธั ะทะฐ ัะฐัะบั! ะะฐะดะธะบ ะฟะปะพัะพะณะพ ะฝะต ะฟะพัะพะฒะตััะตั ๐",
  "๐ค ะกะปััะฐะน, ััั ัะฐะบะพะต ะดะตะปะพ... ะขะฐัะบะฐ ะฟัะพัะธั ะฝะตะผะฝะพะณะพ ะปัะฑะฒะธ ะฒ ะฒะธะดะต ะฟะปะฐัะตะถะฐ!"
];

function getRandomMessage(): string {
  const randomIndex = Math.floor(Math.random() * REMINDER_MESSAGES.length);
  return REMINDER_MESSAGES[randomIndex];
}

export async function setupPaymentReminders(bot: Bot<MyConversationContext>) {
  // Schedule for every Wednesday at 12:00
  cron.schedule('0 12 * * 3', async () => {
    try {
      // Get all users
      const users = await prisma.user.findMany();

      for (const user of users) {
        const cars = await getUserCars(user.id);
        
        if (cars.length === 0) continue;

        // Check if there were any payments this week
        let needsReminder = false;
        const carDetails = [];

        for (const car of cars) {
          const payments = await getPaymentsForWeek(car.id);
          const stats = await getCarStatistics(car.id);
          
          if (!stats) continue;
          
          // Only remind if there's still an amount to pay and no payments this week
          if (stats.remaining_amount > 0 && payments.length === 0) {
            needsReminder = true;
            carDetails.push({
              name: car.name,
              remaining: stats.remaining_amount
            });
          }
        }

        if (needsReminder && carDetails.length > 0) {
          const message = getRandomMessage() + "\n\n";
          const details = carDetails.map(car => 
            `๐ ${car.name}\n` +
            `โโโโโโโโโโโโโโโโโโโโโโโ\n` +
            `โ ๐ธ ะะฐะดะพ ะทะฐะฝะตััะธ: $${car.remaining}\n` +
            `โโโโโโโโโโโโโโโโโโโโโโโ`
          ).join('\n\n');

          try {
            await bot.api.sendMessage(Number(user.telegramId), 
              message + details + "\n\n" +
              "ะะฐะดะธะบ ะฝะฐ ัะฒัะทะธ, ะฑัะฐัะธัะบะฐ! ะะฐะบ ะฝะฐะดัะผะฐะตัั - ะถะผะธ 'ะะฐะฝะตััะธ ะฑะฐะฑะบะธ' ๐ช"
            );
          } catch (error) {
            console.error(`Failed to send reminder to user ${user.telegramId}:`, error);
          }
        }
      }
    } catch (error) {
      console.error('Error in payment reminder cron job:', error);
    }
  }, {
    timezone: "Europe/Kiev" // Adjust timezone as needed
  });
} 